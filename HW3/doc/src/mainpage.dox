////////////////////////////////////////////////////////////////////
/*!
 * @mainpage Computer Homework 3
 * Solve Kepler problem via Monte Carlo Metropolis
 * method described in 
 * [Entropy 2020, 22(9), 916](https://doi.org/10.3390/e22090916)
 * @section req Requirements
 * To install this program, you should have
 * - C++ compiler like g++
 * - gnu make or cmake
 * @section install Installation
 * - gnu make
 *   - Type make, then we can see hw3 executable file in bin directory
 * - cmake
 *   1. make build directory
 *   2. go to build directory and type cmake .. -DPRECISION_LEVEL precision_level
 *      - precison_level 0: float
 *      - precison_level 1: double
 *      - if you want monitor optimization process you can set -DMONITOR=1
 *   3. Type make then you can see hw3 executable in build directory
 * @section hwoto How To Use
 * Execute hw3 then, it will interactively read
 * - inital condition
 * - tolerance for the action integral
 * - number of sine and cosine will be used to approximate the path
 * - number of points to evaluate the minimized path 
 * - step size
 * - parameter which controls acceptance of move
 * - number of iteration
 * - output file names
 * 
 * Then it computes and saves solution to file.
 * You can plot the result using usual plotting software like gnuplot
 * @section hwoto_monitor How To plot saved monitor file
 * If you set -DMONITOR=1 in cmake build process, after execuation of hw3 program,
 * you will get c++ binary file for the monitoring of the optimization process.
 * If you also set -DPRECISION_LEVEL=0, datatype of such binary file would be float.
 * Otherwise, datatype would be double.
 * See libmcm::mcm::optimize for the detailed information of the format of such file.
 * Anyway, If you have python3 and numpy and matplotlib module installed in it, then
 * you can plot saved monitor file using plot_monitor_float.py (if -DPRECISION_LEVEL=0) or
 * plot_monitor_double.py (if -DPRECISION_LEVEL=1) script located in monitor folder. 
 * @section copyright Copyright
 * Copyright 2021 pistack (Junho Lee). All rights reserved.
 * @section license License
 * This project is released under the GNU Lesser General Public License
 * v3.0.
 *
 * @defgroup libpath libpath
 * @brief template library which
 *  1. define support function (fourier function, bezier curve)
 *  2. approximate path using support function
 *  3. compute the action of path approximated by support function
 *
 * @defgroup libmcm libmcm
 * @brief template library which 
 * minimize action via Monte Carlo Metropolis Method
 */
///////////////////////////////////////////////////////////////////////

